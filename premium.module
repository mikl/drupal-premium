<?php /* $Id$ */
/**
 * @file Restrict access to the full body of premium content
 */
 
/**
 * Implementation of hook_help()
 */
function premium_help($section) {
  switch($section) {
    case 'admin/modules#description' :
      return t('Restrict access to premium content');
  }
  return;
}

/**
 * Implementation of hook_perm()
 */
function premium_perm() {
  return array('access premium content');
}

/**
 * Implementation of hook_settings()
 */
function premium_settings() {
  $form = '';
  
  // timeframe for premium + update existing nodes
  $options = array(
      '0' => t('Premium items are permanently restricted'), 
      'archive' => t('Protect archives only: Items switch to premium status after a specified period'), 
      'latest' => t('Protect latest content only: Items switch to non-premium status after a specified period'), 
  );
  $form .= form_radios(t('Mode'), 'premium_mode', variable_get('premium_mode', '0'), $options);
  
  $options = array(1=>1, 2=>2, 3=>3, 4=>4, 5=>5, 6=>6, 7=>7, 8=>8, 9=>9, 
    10=>10, 11=>11, 12=>12, 13=>13, 14=>14, 15=>15);
  $form .= form_select(t('Count'), 'premium_time_count', variable_get('premium_time_count', '2'), $options);
  
  $options = array('D' => t('Days'), 'W' => t('Weeks'), 'M' => t('Months'), 'Y' => t('Years')); 
  $form .= form_select(t('Unit'), 'premium_time_unit', variable_get('premium_time_unit', 'W'), $options);
  
  $form .= form_textarea(t('Premium body text'), 'premium_message', variable_get('premium_message', t('Full text available to premium subscribers only')), 60, 30, t('When a visitor doesn\'t have access to a premium item they will see this message instead of its full text'));
  
  return $form;
}

/**
 * Implementation of hook_cron()
 */
function premium_cron() {
  db_query('DELETE FROM {premium} WHERE start_ts < NOW() AND end_ts != 0 AND end_ts < NOW()');
}

/**
 * Implementation of hook_nodeapi()
 */
function premium_nodeapi(&$node, $op, $teaser) {
  switch ($op) {
    
    case 'delete':
    case 'insert':
    case 'update':
      if ($node->nid) {
        db_query('DELETE FROM {premium} WHERE nid = %d', $node->nid);
        if ($op == 'delete') return;
      }
      if ($node->premium) {
        _premium_offset($node, $start_ts = 0, $end_ts = 0);
        db_query('INSERT INTO {premium} (nid, start_ts, end_ts) VALUES ( %d, %d, %d )'
          , $node->nid, $start_ts, $end_ts);
      }
      return;
      
    case 'load':
      return array('premium' => (int) db_result(db_query(
      		'SELECT 1 FROM {premium}  WHERE nid = %d 
    			AND ( start_ts = 0 OR start_ts > NOW()) AND end_ts < NOW()', $node->nid)));
      
    case 'settings':
      return form_checkbox(t('Access restricted for non-premium users'), "node_{$node->type}_premium", 1, variable_get("node_{$node->type}_premium", 0));
    case 'form admin':
      return form_checkbox(t('Access restricted for non-premium users'), 'premium', 1, variable_get("node_{$node->type}_premium", 0));
      
    case 'view':
      global $user;
      if (!$node->premium || user_access('access premium content')) {
		    return;                  // not premium content or user has privileges
		  }
      if ($teaser) {
        return;                  // not viewing the body
      }
      foreach (module_implements('premium_access') as $name) {
        $function = $name.'_premium_access';
        if ($function($user, $node)) {
          return;                // access granted explicitly
        }
      }
  
      $node->body = theme('premium_body', $node);
  }
  return;
} 

/**
 * Calculate time offset for auto-aging / auto-archiving
 */
function _premium_offset($node, &$start_ts, &$end_ts) {
  $c = variable_get('premium_time_count',2);
  $u = variable_get('premium_time_unit','W');
  $s = $node->created;
  
  switch ( variable_get('premium_mode', 0) ) {
    
    case 'archive' :             // public first, premium after awhile
      $start_ts = mktime(date('H',$s)+($u=='H')*$c, 0, 0, date('m',$s)+($u=='M')*$c,
        date('d',$s)+($u=='D')*$c+($u=='W')*$c*7, date('y',$s)+($u=='Y')*$c);
      return;
    
    case 'latest' :             // premium first, ages to general availability
      $end_ts   = mktime(date('H',$s)+($u=='H')*$c, 0, 0, date('m',$s)+($u=='M')*$c,
        date('d',$s)+($u=='D')*$c+($u=='W')*$c*7, date('y',$s)+($u=='Y')*$c);
      return;
  }
  return;
}

/**
 * Reformat the message body with a premium content message
 */
function theme_premium_body($node) {
  return $node->teaser . '<br />'.variable_get('premium_message','');
}