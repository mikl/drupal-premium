<?php 
/**
 * @file Restrict access to the full body of premium content
 */

/**
 * Implementation of hook_menu()
 */
function premium_menu() {
  $items = array();

  $items['admin/content/premium'] = array(
    'title' => t('Premium content'),
    'description' => t('Settings for access control to premium content.'),
    'page callback' => 'premium_admin_overview_page',
    'access arguments' => array('administer premium content levels'),
    'file' => 'premium.admin.inc',
  );

  $items['admin/content/premium/overview'] = array(
    'title' => t('Overview'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '-10', 
  );

  $items['admin/content/premium/add'] = array(
    'title' => t('Add premium level'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('premium_admin_level_edit_form'),
    'access arguments' => array('administer premium content levels'),
    'type' => MENU_LOCAL_TASK, 
    'file' => 'premium.admin.inc',
  );

  $items['admin/content/premium/%premium_level/edit'] = array(
    'title' => t('Edit premium level'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('premium_admin_level_edit_form', 3),
    'access arguments' => array('administer premium content levels'),
    'type' => MENU_CALLBACK, 
    'file' => 'premium.admin.inc',
  );

  $items['admin/content/premium/%premium_level/delete'] = array(
    'title' => t('Delete premium level'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('premium_admin_level_delete_form', 3),
    'access arguments' => array('administer premium content levels'),
    'type' => MENU_CALLBACK, 
    'file' => 'premium.admin.inc',
  );

  return $items;
}
 
/**
 * Implementation of hook_perm()
 */
function premium_perm() {
  $perms = array(
    'administer premium content levels',
    'administer node premium status',
  );

  foreach (premium_level_option_list() as $level_name) {
    $perms[] = 'access “' . check_plain($level_name) . '” premium content';
  }

  return $perms;
}

/**
 * Implementation of hook_cron()
 */
function premium_cron() {
  $ts = $_SERVER['REQUEST_TIME'];

  // Clean out premium node data that has expired.
  db_query("DELETE FROM {premium_nodes} WHERE start_ts < %d AND end_ts <> 0 AND end_ts < %d", $ts, $ts);
}

/**
 * Implementation of hook_nodeapi()
 */
function premium_nodeapi(&$node, $op, $teaser) {
  $node->premium = _premium_node($node);
  $node->premium_access = _premium_access($node, $teaser);

  switch ($op) {
    case 'load':
      return array(
        'premium' => $node->premium,
        'premium_access' => $node->premium_access);
    
    case 'insert':
    case 'delete':
    case 'update': 
      _premium_set_premium($node, $node->premium);
      return;
      
    case 'view':
      if (!$node->premium_access) {
        $node->content['body']['#value'] = theme('premium_body', $node);
      }
      return;
  }
  return;
} 

/**
 * Implementation of hook_node_operations().
 */
function premium_node_operations() {
  $operations = array(
    'premium' => array(
      'label' => t('Set premium status'),
      'callback' => '_premium_node_operations_premium',
      'callback arguments' => array(1),
    ),
    'unpremium' => array(
      'label' => t('Remove premium status'),
      'callback' => '_premium_node_operations_premium',
      'callback arguments' => array(0),
    ),
  ); 
  return $operations;
}

/**
 * Callback for hook_node_operations()
 */
function _premium_node_operations_premium($nids, $premium = 0) {
  foreach ($nids as $nid) {
    $node = node_load($nid);
    _premium_set_premium($node, $premium);
  }
}

/**
 * Implementation of hook_form_alter()
 * 
 * Add the Premium checkbox to the node editing options and default settings
 * The Premium flag will behave like other options (published, promote, etc)
 */
function premium_form_alter(&$form, $form_state, $form_id) {
  $type = $form['type']['#value'];
  $title = t('Access to full node content');
  
  switch ($form_id) {
    
    case 'node_type_form':
      unset($type);
      $type = $form['#node_type'];
      $node_type = $type->type;
      $form['workflow']["node_{$node_type}_premium"] = array(
        '#type' => 'select',
        '#title' => $title,
        '#default_value' => variable_get("node_{$node_type}_premium_{$node_type}", 0),
        '#options' => array(0 => t('No restrictions')) + premium_level_option_list(), 
      );
      return;
      
    case $type .'_node_form':
      if (user_access('administer node premium status')) {
        $node = $form['#node'];
        $form['options']['premium'] = array(
          '#type' => 'select', 
          '#title' => $title, 
          '#default_value' => settype(_premium_node($node), 'integer'),
          '#options' => array(0 => t('No restrictions')) + premium_level_option_list(),
        );
      }
      return;
  }
}

/**
 * Load a premium level based on level_id.
 */
function premium_level_load($level_id) {
  $query = db_query('SELECT * FROM {premium_levels} WHERE level_id = %d', array(':id' => $level_id));

  if ($level = db_fetch_array($query)) {
    return $level;
  }
  return FALSE;
}

/**
 * Get a list of premium levels keyed by level_id.
 */
function premium_level_load_all() {
  static $levels;
  if (!is_array($levels)) {
    $levels = array();
    $result = db_query('SELECT * FROM {premium_levels}');
    while ($lvl = db_fetch_array($result)) {
      $levels[$lvl['level_id']] = $lvl;
    }
  }
  return $levels;
}

/**
 * Get a list of premium level names as an id-keyed array (for selection menus, etc)
 */
function premium_level_option_list() {
  $levels = array();
  foreach (premium_level_load_all() as $level_id => $level) {
    $levels[$level_id] = $level->name;
  }
  return $levels;
}

/**
 * Inserts a new record, or updates an existing one.
 *
 * @param $level
 *   A level to be saved. If $level['level_id'] is set, the level will be updated.
 *   Otherwise, a new level will be inserted into the database.
 * @return
 *   The saved level, with its level_id set.
 */
function premium_level_save($level) {
  if (isset($level['level_id'])) {
    drupal_write_record('premium_levels', $level, 'level_id');
  }
  else {
    drupal_write_record('premium_levels', $level);
  }
  return $record;
}

/**
 * Deletes a record, given its unique ID.
 *
 * @param $record_id
 *   An int containing the ID of a record.
 */
function premium_level_delete($level_id) {
  db_query('DELETE FROM {premium_levels} WHERE level_id = %d', $level_id);
  db_query('DELETE FROM {premium_nodes} WHERE level_id = %d', $level_id);
}

/**
 * Calculate time offset for auto-aging / auto-archiving
 */
function _premium_offset($timestamp, &$start_ts, &$end_ts, $mode, $count, $unit) {

  // If the timestamp is zero, set it to "now" so mktime() will work properly.
  $ts = $timestamp ? $timestamp : $_SERVER['REQUEST_TIME'];
  $offset = mktime(
    date('H', $ts) + ($unit=='H') * $count, 0, 0, 
    date('m', $ts) + ($unit=='M') * $count,
    date('d', $ts) + ($unit=='D') * $count + ($unit == 'W') * $count * 7, 
    date('y', $ts) + ($unit=='Y') * $count
  );

  // If we faked a timestamp, remove it.
  if ($ts != $timestamp) { $offset -= $ts; }

  if ($mode == 'archive') { $start_ts = $offset; }
  if ($mode == 'latest') { $end_ts = $offset; }
}

/**
 * Establish premium settings for a node or node type
 */
function _premium_node($node) {
  // This is a node type: use default settings
  if (is_string($node)) {
    return in_array('premium', variable_get("node_options_{$node}", array()));
  }

  // Already has a value.
  if (isset($node->premium)) return $node->premium;

  if ($node->nid) {
    // Attempt to find the value from the premium table.
    return (int) db_result(db_query("SELECT 1 FROM {premium}  WHERE nid = %d
      AND (( start_ts = 0 and end_ts > %d)
      OR ( start_ts < %d AND end_ts = 0)
      OR ( start_ts = 0 AND end_ts = 0))", $node->nid, time(), time()));
  }

  // Use default settings for this node type.
  return in_array('premium', variable_get("node_options_{$node->type}", array()));
}

/**
 * Establish premium visibility settings for a node
 */
function _premium_access($node, $teaser) {
  if (isset($node->premium_access)) return $node->premium_access;

  // Access is granted or revoked explicitly.
  foreach (module_implements('premium_access') as $name) {
    $function = $name .'_premium_access';
    if (is_bool($access = $function($user, $node))) {
      return $access;
    }
  }

  // Not viewing the body, or it's not premium, or user has privileges.
  if ($teaser || !$node->premium || user_access('access premium content')) {
    return TRUE;
  }

  // Nobody said we could access the node. 
  return FALSE;
}
 
/**
 * Update the premium table with appropriate premium values for a node.
 */
function _premium_set_premium($node, $premium = FALSE) {
  db_query('DELETE FROM {premium_nodes} WHERE nid = %d', $node->nid);
  if ($premium) {
    $start_ts = $end_ts = 0 ;
    $mode = variable_get('premium_mode', 0);
    $count = variable_get('premium_time_count', 2);
    $unit = variable_get('premium_time_unit', 'W');
    _premium_offset($node->created, $start_ts, $end_ts, $mode, $count, $unit);
    db_query('INSERT INTO {premium} (nid, start_ts, end_ts) 
              VALUES ( %d, %d, %d )', $node->nid, $start_ts, $end_ts);
  }
}

/**
 * Implementation of hook_theme().
 */
function premium_theme() {
  return array(
    'premium_body' => array(
      'arguments' => array('node' => NULL),
    ),
  );
}

/**
 * Reformat the message body with a premium content message
 */
function theme_premium_body($node) {
  return check_markup($node->teaser, $node->format, FALSE) .'<div class="premium-message">'. check_markup(variable_get('premium_message', t('Full text available to premium subscribers only')), variable_get('premium_format', FILTER_FORMAT_DEFAULT), FALSE) .'</div>';
}

